TODOs:
  -Pass the type of vertex attributes to each mesh of the TinyGL lib. Or Manually create the buffers and attach them to the mesh later;
  -Make the use of a transfer function optional (pass a uniform parameter to the shader). This can be used to render a dataset when no TF is selected;
  -Make a topological visualizer. Find the coordinates of the contour tree vertices and plot them;
  -Create a base Manager class, since the Dataset, TFunction and Alpha managers have almost the same code.
    -Too many f***** linker errors!
  -Create a set of standard Depth First Search and Breadth First Search functions and pass the callbacks to them to calculate a branch feature set, etc.
  -Parametrize the Create*DTex and Upload*DTex functions to have just one Create and one Upload function.

IDEAS:
  -Calcular os centróides das regiões definidas pelos vértices e unir os ramos simplificados com os centróides mais próximos. Possivelmente vou ter que implementar algum algoritmo de closest-pair.
    -Muito trabalhoso, melhor unir os ramos que estiverem ligados ao mesmo saddle point.

QUESTIONS:
  -Use a 2D transfer function + vertex-branch map or a preaplied alpha dataset?
    -Use an alpha dataset coupled with a color transfer function. Change the transfer function metadata, since I won't have more multi dimensiontal TFs anymore.
    -Use the knl::Dataset for the alpha datasets.
    -Parametrize the Create*DTex and Upload*DTex functions to have just one Create and one Upload function.
  -Use OpenCL to cast the rays?
    -Bolt? Compatibility AMD/NVIDIA?